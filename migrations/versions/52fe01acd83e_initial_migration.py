"""Initial migration

Revision ID: 52fe01acd83e
Revises: 
Create Date: 2024-08-19 01:23:16.830173

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '52fe01acd83e'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('reviews', schema=None) as batch_op:
        batch_op.drop_index('ix_reviews_parcel_id')
        batch_op.drop_index('ix_reviews_user_id')

    op.drop_table('reviews')
    op.drop_table('parcel_types')
    with op.batch_alter_table('delivery_history', schema=None) as batch_op:
        batch_op.drop_index('ix_delivery_history_parcel_id')
        batch_op.drop_index('ix_delivery_history_status')

    op.drop_table('delivery_history')
    with op.batch_alter_table('notifications', schema=None) as batch_op:
        batch_op.drop_index('ix_notifications_parcel_id')
        batch_op.drop_index('ix_notifications_user_id')

    op.drop_table('notifications')
    op.drop_table('contacts')
    with op.batch_alter_table('admins', schema=None) as batch_op:
        batch_op.drop_index('ix_admins_email')
        batch_op.drop_column('updated_at')
        batch_op.drop_column('created_at')

    with op.batch_alter_table('drivers', schema=None) as batch_op:
        batch_op.alter_column('email',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
        batch_op.alter_column('_password_hash',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)

    with op.batch_alter_table('parcels', schema=None) as batch_op:
        batch_op.alter_column('status',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.drop_index('ix_parcels_driver_id')
        batch_op.drop_index('ix_parcels_status')
        batch_op.drop_index('ix_parcels_user_id')
        batch_op.drop_column('updated_at')

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index('ix_users_email')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index('ix_users_email', ['email'], unique=True)

    with op.batch_alter_table('parcels', schema=None) as batch_op:
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.create_index('ix_parcels_user_id', ['user_id'], unique=False)
        batch_op.create_index('ix_parcels_status', ['status'], unique=False)
        batch_op.create_index('ix_parcels_driver_id', ['driver_id'], unique=False)
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('status',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)

    with op.batch_alter_table('drivers', schema=None) as batch_op:
        batch_op.alter_column('_password_hash',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
        batch_op.alter_column('email',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)

    with op.batch_alter_table('admins', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.create_index('ix_admins_email', ['email'], unique=True)

    op.create_table('contacts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('subject', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='contacts_pkey')
    )
    op.create_table('notifications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('parcel_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('message', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('sent_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parcel_id'], ['parcels.id'], name='notifications_parcel_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='notifications_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='notifications_pkey')
    )
    with op.batch_alter_table('notifications', schema=None) as batch_op:
        batch_op.create_index('ix_notifications_user_id', ['user_id'], unique=False)
        batch_op.create_index('ix_notifications_parcel_id', ['parcel_id'], unique=False)

    op.create_table('delivery_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('parcel_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('location', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('location_lat', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('location_lng', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parcel_id'], ['parcels.id'], name='delivery_history_parcel_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='delivery_history_pkey')
    )
    with op.batch_alter_table('delivery_history', schema=None) as batch_op:
        batch_op.create_index('ix_delivery_history_status', ['status'], unique=False)
        batch_op.create_index('ix_delivery_history_parcel_id', ['parcel_id'], unique=False)

    op.create_table('parcel_types',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('type_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('weight_range', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('price', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='parcel_types_pkey')
    )
    op.create_table('reviews',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('parcel_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('rating', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parcel_id'], ['parcels.id'], name='reviews_parcel_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='reviews_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='reviews_pkey')
    )
    with op.batch_alter_table('reviews', schema=None) as batch_op:
        batch_op.create_index('ix_reviews_user_id', ['user_id'], unique=False)
        batch_op.create_index('ix_reviews_parcel_id', ['parcel_id'], unique=False)

    # ### end Alembic commands ###
